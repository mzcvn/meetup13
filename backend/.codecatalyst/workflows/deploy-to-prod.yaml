Name: DeployToProd
SchemaVersion: "1.0"
#RunMode: QUEUED | SUPERSEDED | PARALLEL
Triggers:
  - Type: PUSH
    Branches:
      - main
Compute:
  Type: Lambda
  Fleet: Linux.x86-64.Large
Actions:
  BuildAndTest:
    Actions:
      Test:
        Identifier: aws/managed-test@v1
        Inputs:
          Sources:
            - WorkflowSource
        Configuration:
          Steps:
            - Run: "cd src/"
            - Run: "npm install"
            - Run: "mkdir coverage/"
            - Run: "npm run lint"
            - Run: "npm test"
        Outputs:
          AutoDiscoverReports:
            Enabled: true
            ReportNamePrefix: Test
            IncludePaths:
                - "src/coverage/*"
            SuccessCriteria:
              PassRate: 90
              LineCoverage: 50
              BranchCoverage: 50
              StaticAnalysisBug:
                Severity: CRITICAL
              StaticAnalysisSecurity:
                Severity: CRITICAL
              StaticAnalysisQuality:
                Severity: CRITICAL
      SecurityScan:
        Inputs:
          Sources:
            - WorkflowSource
        Identifier: aws/managed-test@v1
        Configuration:
          Steps:
            - Run: sourceRepositoryDirectory=$(pwd)
            - Run: cd src && npm install
            - Run: cd .. && wget https://github.com/jeremylong/DependencyCheck/releases/download/v8.1.2/dependency-check-8.1.2-release.zip
            - Run: unzip dependency-check-8.1.2-release.zip
            - Run: cd dependency-check/bin
            - Run: ./dependency-check.sh --scan $sourceRepositoryDirectory/src -o $sourceRepositoryDirectory/src/vulnerabilities -f SARIF --disableYarnAudit
        Outputs:
          AutoDiscoverReports:
            Enabled: true
            ReportNamePrefix: owasp
            IncludePaths:
                - "src/**/*"
            SuccessCriteria:
              Vulnerabilities:
                Severity: CRITICAL
      Build:
        Identifier: aws/build@v1
        Inputs:
          Sources:
            - WorkflowSource
        Outputs:
          Artifacts:
            - Name: build_artifacts
              Files:
                - "**/*"
        Configuration:
          Steps:
            - Run: sam build --template-file template.yaml
            - Run: cd .aws-sam/build/
            - Run: sam package --output-template-file packaged.yaml --resolve-s3 --template-file template.yaml --region ap-southeast-1
        Environment:
          Name: production
          Connections:
            - Name: "Your AWS account ID"
              Role: CodeCatalystPreviewDevelopmentAdministrator-4sfz18
  DeployToDevEnvironment:
    Identifier: aws/cfn-deploy@v1
    DependsOn:
      - BuildAndTest
    Inputs:
      Artifacts:
        - build_artifacts
    Configuration:
      name: webapp
      region: ap-southeast-1
      template: .aws-sam/build/packaged.yaml
      capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
      fail-on-empty-changeset: "0"
    Environment:
      Name: production
      Connections:
        - Name: "Your AWS account ID"
          Role: CodeCatalystPreviewDevelopmentAdministrator-4sfz18
  NotifiyViaSlack:
    Identifier: aws/github-actions-runner@v1.0.0 
    Compute:
      Type: EC2
      Fleet: Linux.x86-64.Large
    DependsOn:
      - BuildAndTest
    Configuration:
      Steps:
        - uses: slackapi/slack-github-action@v1.23.0
          with:
            payload: |
              {
                "channel": "#aws-code-catalyst",
                "username": "codecatalyst-workflow",
                "text": "API is successful deployed to Production Environment, see ${DeployToDevEnvironment.InvokeURL}",
                "icon_emoji": ":building_construction:"
              }
          env:
            SLACK_WEBHOOK_URL: ${Secrets.SLACK_WEBHOOK}